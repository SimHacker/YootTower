APPENDIX VI: SMALLTALK INTERPRETER DESIGN DOCUMENTATION
General Landscape of the Sixties
The almost-OOP idea started early, as designers found that the straightforward material-and-recipe metaphors of data structures and procedures broke down all too readily under stress.
1962-1964
representation independence (wrapping)
USAF ATG
unknown
file system
1960-1964
1962-1963
1962-1963
protection, HLL Arch, many firsts graphics, simulation, classes, instances coroutines
B 5000
Barton
Sketchpad
Sutherland
B220 COBOL Comp. Conway
1964-1967
general simulation: proc classes & instances
Simula
Nygaard, Dahl
1967-1969
subsuming programming constructs
FLEX
Kay
1967-*
inheritance
Simula-67

1967
"dataless programming"
??
Nygaard, Dahl Balzer
1969-1971
capability operating system
CAL-TSS
Lampson-Sturgis
kernel elegance, self-describing, etc.
LISP
McCarthy
ease of end-user authoring
JOSS
Shaw
generalizations of PLs
GA, EULER, APL,
van Wijn..., Wirth

etc.

pattern-based inferencing definition of control structures
PLANNER
CDL
Hewitt
Fisher
What these designers had in common—and what set them apart from others in the field—was an interest in finding simple general structures to finesse difficulties, rather than expending enormous efforts to produce large amounts of code.
In addition to these initial gropings towards the OOP idea, several other early nonOOP systems contributed important ideas and stylistic directions.
1959-1963
1959-1966
1961-1966
1967-1969
1968-1970
The other major set of cross-currents at work in the sixties was Licklider's dream of man-machine symbiosis.
This led to the formation of the ARPA IPT office that in the sixties funded most of the advanced computer research in the US. Perhaps as important is that these visions were also adopted by other funders such as ONR and NIH.
Shortly there appeared on the scene time-sharing, computer graphics, advanced networking, and many other new ways to think about the technology. In addition to several of the above listings (for example, Sketchpad, JOSS), specific contributions to the invention of personal computing were:
Finally, there was a considerable background radiation of ideas generated by the enormous productivity of the sixties. It was still possible back then to be aware of just about everything that was going on and most ideas contributed, even if only to help avoid unpromising paths. For example:
1960-1969
1960-1969
1963-1969
1963-1970
1962
first true personal computer
LINC
Clark
1962-1967?
metaphor of personal computing
NLS

1964-1966
modern operating system
GENIE
Englebart
1964
programming for children
LOGO
Lampson
1967-1969
first 0O desktop PC

Feurzig, Papert
196?-?
conceptions of end-user interaction
FLEX machine
ARC-MACH
Cheadle-Kay
1967-1969
gesture/modeless GUl, iconic prog.
GRAIL
Negroponte
Ellis, Groner,
1968
early iconic programming
AMBIT-G
et al
Rovner
syntax dir. proc., extensible lang., etc.
FSL, META II, IMP, Feldman, Shorre,

EL1
Trons, Wegbreit
formal models of prog
CPL, ISWIM,
Strachey, Landin,
postALGOL, DS definitions
GEDANKEN
Reynolds
ALGOL-W,
Wirth, Hoare,
Al representation development
-X,-68, etc.
van Wijn..., etc.
GAS，***，
Minsky, Evans,

QA4, etc.
Winston, Hewitt
In other words, there was an entire landscape of activity going on even when the filter is restricted to the 10% or so that was actually interesting.

Smalltalk Documentation
After PARC got set up, it was customary to write a report every six months and a two-year plan every September.
I have many of these, but will not list them specifically. All the things described in the text of this chapter were documented in the six-month report that followed, which (in our case) always contained lots of screen shots of the latest wonders. I should also mention that there is an extensive collection of slides, 16mm film (most of it shot by me) both in my files and at Xerox, and many hours of video tapes of all aspects of our work.
Nov 1970
KiddiKomp notebook
Spring 1971
First of several SLOGO documents
June 1971
Display Transducers, (A Pendery Paper for PARC Planning Purposes)
Sum 1971
"Brown Lab Book" (lost or mislaid)
Sum 1971
miniCOM documents
Sum 1971
early Smalltalk-71 programs
Sum 1971
first LRG plan
Fall 1971
first LRG report
Fall 1971
FJCC panel abstract on mainframes as dinosaurs that will be replaced by personal computers
Win 1972
report on the wonderful world of fonts (lost or mislaid, most material duped in "May 1972")
May 1972
formal miniCOM proposal (per "X"), I have first draft
Sum 1972
Drafts of A Personal Computer For Children Of All Ages, many Smalltalk-71 programs
Aug 1972
Final Draft of APCFCOAA (Smalltalk-71 programs removed as per D. Bobrow suggestion)
ACM Nat'1 Conf. Boston
Sept 1972
LRG plan about "iconic programming," etc. Xerox probably still has. (Jack Goldman files?)
Sept 1972
First Smalltalk-72 "one page" interpreter demonstration
Oct 1972
First Smalltalk-72 programs run (D. Ingalls)
Nov 1972
A Dynamic Medium For Creative Thought, NCTE Conference "20 things to do with a Dynabook"
This was pretty much what I wanted the group to accomplish (except for music, etc.)
Nov 1972
Presentation to MIT Al Lab of Smalltalk and its interpreter
Nov 1972
Stewart Brand Rolling Stone article on PARC-caused blackout of LRG pubs until 1975.
Win 1973
Smalltalk "Bluebook": general documentation, teaching sequences, alternate syntaxes, etc
Win 1973
First of many Smalltalk bootstrap files (D. Ingalls)-so readable, they were used as a manual
1973-1975
Many application documentation notes, written by Ted Kaehler, Diana Merry, etc.
1974
minimouse (Larry Tesler)
??

1975
Blackout lifted. Smalltalk-72 Handbook (with Adele), PARC TR-?
1975
Dynamic Personal Media (with Adele)
proposal to NSF for funding longitudinal studies of children
1975
PYGMALION *** (David Canfield Smith), Ph.D. Thesis, Stanford, also as ???
1976
Dynamic Personal Media (with Adele)

PARC TR-?, a fairly complete rendering of work through 1975
1976
1976
First Note Taker documents
Findit (with Steve Weyer), presented at "Dulles" learning center
1977
Smalltalk in the Classroom (with Adele), PARC TRs, report on work with kids
???
Marion Goldeen, etc., articles on her experiences (Creative Computing?)
1977
Personal Dynamic Media (with Adele) IEEE Computer, March.
1977
Smalltalk-76 Listing (Dan Ingalls + Dave Robson, Ted Kaehler, Diana Merry)
The first complete running system
1977
Smalltalk-76 Documentation (Larry Tesler) with included applications
1977
More Note Taker documents (with Doug Fairbairn)
1977
THINGLAB *** (Alan Borning), Ph.D. Thesis, Stanford
1977
Microelectronics and the personal computer, Scientific American, Sept.
1978
Smalltalk-76 (Dan Ingalls), ACM POPL Conference, January
1979
TinyTalk (Larry Tesler and Kim McCall) where?
1979
Programming Your Own Computer, Science Year '79, World Book Computer Infotech State of the Art Report
1979
The Programming Language Smalltalk-72 (John Shoch),
冬*米水*
*, Paris
1980
Infotech State of the Art Report
1981
Smalltalk Issue, Byte Magazine
1983
Goldberg and Robson

+ ca 1975-1966 ???, 3D masters thesis in ST-72

+ ca 1978-1980 Gould and Finzer, Rehearsal World

+ ca 1978 Ingalls, Horn, etc., Smalltalk-78, Dorado Smalltalk, etc.

+ ca 1979ish Goldstein & Bobrow, PIE documents
+ ca 1980 Steve Weyer Thesis

Historical Views Of PARC and LRG

19**
Ted Nelson Ravings
19**
Tim Rentsch paper
1984
Smalltalk Implementation History, D. Ingalls
198**
Tools for Thought, H. Rheingold, good profile on early ARPA, Engelbart, etc.
198**
IEEE Computer, Tekla Perry, et al., excellent portrait of PARC
1989
Smalltalk, Past, Present, and Future, P. Deutsch
19**
Fumbling the Future, disorganized, and inaccurate portrait of PARC
Smalltalk Spinoffs
Hewitt Actors papers
D-LISP (User interface)
MIT LISP machines
Rosetta Smalltalk
Methods and Smalltalk-V etc.
REFERENCES
[ACM, 1969] ACM SIGPLAN, Conference on Extensible Languages, May 1969.
[Arnheim, 1969] Arnheim, Rudolf, Visual Thinking, Berkeley: University of California Press, 1969.
[Balzer, 1967] Balzer, R.M. Dataless programming. Proceedings of the FJCC, July 1967.
[Barton, 1961] Barton, R.S. A new approach to the functional design of a digital computer, in Proceedings of the WJCC, May
1961.
[Baecker, 1969] Baecker, Ronald M. Interactive computer-mediated animation, Dept. of Electrical Engineering, Ph.D. thesis,
MIT, 1969, Supervisor: Edward L. Glaser.
[Borning, 1979] Borning, Alan. Thinglab—A constraint-oriented simulation laboratory, Xerox Palo Alto Research Center,
#SSL-79-3, July 1979.
[Brand, 1972] Brand, Stewart. Fanatic life & symbolic death among the computer bums, Rolling Stone Magazine, Dec. 1972.
[Burroughs, 1961] Burroughs Corp. The Descriptor—a definition of the B5000 information processing system, Detroit,
Michigan, Bulletin No. 5000-20002-P, Feb. 1961.
[Byte, 1981] Byte Maguzine, Issue on Smalltalk, Christopher Morgan, Ed., Vol. 6, No. 8, Aug. 1981.
[Carnap, 1947] Carnap, Rudolf. Meaning and Necessity, A Study in Semantics and Modal Logic, Chicago:University of Chicago
Press, 1947.
[Clark, 1962] Clark, Wesley A. The General Purpose Computer in the Life Sciences Laboratory, in Engineering und the Life
Sciences, NAS-NRC Report, Washington DC, Apr. 1962.
[Clark ,1965)
-, and Molnar, C.E. A Description of the LINC, in Computers in Biomedical Research, Vol. 1, Chapter
2, R. W. Stacy and B.D. Waxman, Ed., New York: Academic Press, 1965.
[Conway, 1963] Conway, Melvin E. Design of a separable transition-diagram compiler, in Communications of the ACM, Vol.
6, No. 7, July 1963, pp. 396-408.
Dahl, 1970] Dahl, O.-J., Decomposition and Classification in Programming Languages, in Linguaggi nella Società e nella
Tecnica. Milan: Edizioni di Comunita, 1972.
[Dahl, 1970] Dahl, O.-J. and Hoare, C. A. R., Hierarchical Program Structures, in Dahl, O.-J., Dijkstra, E. W., and Hoare, C.
A. R., Structured Programming, New York: Academic Press, pp. 175-220
[Davis, 1964] Davis, M. R., and Ellis, T. O. The RAND tablet: A man-machine graphical communication device, report
#RM-4122-ARPA, CA: RAND, 1964.
[Deutsch, 1966] Deutsch, L.P. LISP for the PDP-1, in The Programming Language LISP; Its Operation and Applications,
Edmund C. Berkeley and Daniel G. Bobrow, Eds., Cambridge, MA: M.I.T. Press, ix, p. 382.
[Deutsch, 1989]
_. The past, present, and future of smalltalk, in Proceedings of the 3rd European Conference on Object
Oriented Programming, Cambridge University Press, 1989.
[Engelbart, 1968] Engelbart, Douglas C. and English, William K., A research center for augmenting human intellect, in
Proceedings of the FJCC, Vol. 33, Part one, Dec. 1968, pp. 395-410.
[Farber, 1964 Farber, D. J., Griswald, R. E. and Polensky, F. P., "SNOBOL, a string manipulation language" JACM 11, 1964,
pp. 21-30.
[Feldman, 1977] Feldman, Jerome A. A formal semantics for computer languages and its application in a compiler-compiler,
in Communications of the ACM, Jan. 1977, pp. 3-9.
[Fisher, 1970] Fisher, David Allen. Control structures for programming languages, Ph.D. thesis, Department of Computer
Science, Carnegie Mellon University, 1970.
[Goldberg, 1983] Goldberg, Adele, Kay, Alan C. and Robson, D. Smalltalk-80: The Language and its Implementation, Reading,
MA: Addison Wesley, 1983.
[Goldstein, 1980] Goldstein, I. and Bobrow, D., PIE Papers.
[Gombrich, 1960] Gombrich, E. H. Art & Illusion: A Study in the Psychology of Pictorial Representation, New York: Pantheon
Books, 1960.
[Groner, 1966] Groner, Gabriel. Real-time recognition of hand printed text, CA: RAND, Report #RM-5016-ARPA, Oct. 1966.
[Hewitt, 1969] Hewitt, Carl E. Planner: A language for manipulating models and proving theorems in a robot, Cambridge: MIT,
Project MAC., AT memo #168, 1969.
[Hewitt, 1973]
_, P. Bishop, Greif, I. Smith, B. Matson, T. and Steiger, R. ACTOR induction and meta-evaluation, in
Conference Record of ACM Symposium on Principles of Programming Languages, 1-3 Oct. 1973, New York: ACM,
1973, pp. 153-168.
[Ingalls 1978] Ingalls, D. The Smalltalk-76 Programming System, Design and Implementation, in 5th ACM Symposium on
Principles of Programming Languages, Tucson, AZ, Jan. 1978
[Irons, 1970] Irons, E. T. Experience with an extensible language, in Communications of the ACM, vol. 13, no. 1, Jan. 1970,
pp. 31-40.
[Joss, 1964] Shaw, J. C. JOSS: A Designer's View of an Experimental Online Computer System, CA: RAND, #P-2922, 1964.
[Joss, 1978]
_, JOSS Session, in History of Programming Languages, ed. Richard L. Wexelblat, New York: Academic
Press, xxiii, Chapter X, 1981. Conference: History of Programming Languages Conference, Los Angeles, CA, 1978.
[Kaehler, 1981] Kaehler, Edwin B. Virtual memory for an object-oriented langauge, Byte, Aug. 1981.
[Kay, 1968] Kay, Alan C. FLEX: a flexible extensible language, M.S. thesis, University of Utah, May 1968.
[Kay, 1969]
_The reactive engine, Ph.D. thesis, University of Utah, September 1969.
[Kay, 1970]
Ramblings towards a KiddiKomp, in Stanford Al Project Lab Notebook, Nov. 1970.
[Kay, 1972b
. Learning research group 3 year plan, Xerox Palo Alto Research Center, May 1972
[Kay, 1972c]
.. A personal computer for children of all ages, in Proceedings of the ACM National Conference, Boston,
Aug. 1972.
[Kay, 1977a]
and Goldberg, Adele Personal dynamic media, /EEE Computer, Vol. 10, March 1977, pp. 31-41. Reprinted
in A History of Personal Workstations, New York: Academic Press, 1988.
[Kay, 1979]
_Programming your own computer, Science Year 1979, World Book Encyclopedia, 1979.
[Kiczales, 1991] Kiczales, Gregor, Des Rivieres, Jim Bobrow, Daniel G. The Art of the Metaobject Protocol, Cambridge, MA:
MIT Press, viii, 335 p. 1991.
[Knuth, 1971] Knuth, Donald E. and Floyd, Robert W. Notes on avoiding 'go to statements, in Information Processing Letters,
Vol., 1, No. 1, Feb. 1971.
[Lampson, 1966] Lampson, B.T. Project GENIE documentation, Computer Center, U.C.Berkeley, Oct. 1966.
(Lampson, 1969]
_ An overview of the CAL time-sharing system, Computer Center, U.C. Berkeley, Sept. 1969.
Originally entitled On reliable and extendable operating systems, Sept. 5, 1969.
[McCarthy, 1960] McCarthy, John P. Part 1, Recursive functions of symbolic expressons and their computation by machine,
in Communications of the ACM, Vol. 3, Number 4, April 1960, pp. 184-195.
[Minsky, 1974] Minsky, Marvin. A framework for representing knowledge, MIT, Artificial Intelligence Laboratory Memo No.
306, June 1974. Reprinted in The Psychology of Computer Vision, New York: McGraw-Hill, 1975.
[Newman, 1973] Newman, W. M., and Sproull, R. F. Principles of interactive computer graphics, New York: McGraw-Hill,
1973.
[Nygaard, 1966] Nygaard, Kristen, and Dahl, Ole-Johan. Simula—an ALGOL-based simulation language, in Communicatons
of the ACM, IX, 9, Sept. 1966, pp. 671-678.
[Plato] Plato. Timaeus & Phaedrus: The Dialogues of Plato, translated by Benjamin Jowett, Great Books of the Western World,
Robert Maynard Hutchins, Ed., Encyclopedia Britannica, Inc., 1952.
[Popek, 1984] Popek, G., et al., The Locus Distributed Operating System, Cambridge: MIT Press, 1984.
[Ross, 1960] Ross, D.T., and Ward, J. E. Picture and pushbutton languages, chapter 8 of Investigations in Computer-Aided
Design, interim engineering report 8436-IR-1, Electrical Systems Lab, MIT, May 1960.
[Ross, 1961]
_. A generalized technique for symbol manipulation and numerical calculation, in Communications of
the ACM, Vol. 4, No. 3, March 1961, pp. 147-150.
[Rovner, 1968] Rovner, P. D. An AMBIT/G programming language implementation, MIT Lincoln Laboratory, Lexington, MA,
June 1968.
[Schorre, 1963] Shorre, D. V. META II- A syntax-oriented compiler writing language, UCLA computing facility, [Shoch, 1979] Shoch, J. F. 1979, An overview of the programming language Smalltalk-72, in S/GPLAN Notices, vol. 14, no.
9, Sept. 1979, pp. 64-73.
[Soloway, 1989] Soloway, Elliot and James C. Spohrer, Ed., Studying the Novice Programmer, New Jersey: Lawrence Erlbaum
Associates, Inc., 1989.
[Smith, 1975] Smith, David Canfield. Pygmallion, Ph.D. thesis, Stanford University, 1975.
[Strachey,*] Strachey, Christopher. Toward a formal semantics, United Kingdom.
[Sutherland, 1963] Sutherland, Ivan C. Sketchpad: A man-machine graphical communication system, MIT Lincoln Laboratory,
Technical Report 296, Jan. 1963.
Sutherland, 1963a _ibid, in Proceedings of the S/CC, Vol. 23, 1963, pp. 329-346.
[Sutherland, 1968]
A head-mounted three dimensional display, in Proceedings of the FJCC, 1968, p. 757.
(Thacker, 1972] Thacker, C.P. A personal computer with microparallel processing, Xerox Palo Alto Research Center, Dec.
1972.
[Thacker, 1986] -
- Personal distributed computing: the ALTO and ethernet hardware, in A History of Personal
Workstations, Adele Goldberg, Ed., New York: ACM Press, 1988, pp. 267-290.
[Van Wijngaarden, 1968] Van Wijngaarden, A., Ed., Draft Report on ALGOL 68, Mathematisch Centrum, MR 93, Amsterdam,
The Netherlands, 1968.
[Wirth, 1966] Wirth, N.K. and Weber, H. EULER: A generalization of ALGOL, and its formal definition: Part I, in
Communications of the ACM, Vol. 9, No. 1, Jan. 1966, pp. 13-25.
[Winston, 1970] Winston, Patrick H. Learning structural descriptions from examples, Ph.D. thesis, MIT, Jan. 1970.
[Zahn, 1974] Zahn, C. T, Jr. A control statement for natural top-down structured programming, in Proceedings of the Colloque sur la Programmation, April 1974, Paris. A revised version of this paper appears, under the same title, in Programming Symposium, vol. 19 of the Lecture notes in Computer Science, B. Robinet, Ed., Berlin: Springer Verlag, 1974, pp.
170-180.
TRANSCRIPT OF PRESENTATION
SESSION CHAIR BARBARA RYDER: This interesting biography was given to me by Dr. Kay. Alan Kay is a former professional musician, who majored in mathematics and molecular biology while an undergraduate at the University of Colorado, but spent most of his time working on theatrical productions, and as a systems programmer for the National Center of Atmospheric Research. In 1966 he joined the University of Utah's ARPA Project under Dave Evans and Bob Barton. First contributions were as a member of the original continuous-tone, 3D graphics group. Early on, the confluence of Sketchpad and Simula, with his background in math and biology, brought forth a vision of what
he later called object-oriented programming. Then, with Ed Cheadle at Memcor and Montec Corporation, he designed and built the FLEX Machine, the first object-oriented personal computer.
He received his masters and Ph.D. degrees in 1968 and 1969 (both with distinction) for this work. In 1968, struck by the first flat panel display, the GRAIL system at Rand, and Papert's work on LOGO, Kay conceived of the Dynabook, a notebook-sized intimate computer "For Children of All Ages," and set out to realize it. He spent his first post-doc year at the Stanford Al project, and became one of the founders of Xerox PARC when it was set up in 1970. Between the years of 1971 and 1981, Kay was at Xerox PARC serving as the head of the Learning Research Group, principal scientist, and finally Xerox Fellow. In his own terms, he invented, co-invented, inspired, admired, coerced,and tantrumed, with a host of great colleagues, much of personal computing or as he called it—a new paradigm for human-computer collaboration. He was the original designer of the bit-mapped screen, overlapping window interface, painting graphics, and Smalltalk, the first completely object-oriented language. From 1982 to 1984, he was the Chief Scientist, and then Senior Vice President, of Atari, where he set up a large scale research organization. From 1984 to the present, he has been at Apple Computer Corporation, where he currently is an Apple Fellow. There he started, and is currently the head, of the Vivarium Project, a large scale, long-range investigation of children's learning and ability to be amplified by computers. He is codesigner of a number of language environments, including Playground and Constructo. Beyond computers, music is Kay's special passion. He has been a professional jazz musician, a composer, an amateur classical pipe organist, harpsichordist, and chamber pianist. And the last is, according to him, in a decreasing order of ability and interest. His sole professional membership is in the International Society of Organ Builders. He has built several musical instruments, including a collaboration with a master organ builder on a late 17th century instrument for his home.
ALAN C. KAY My job is to get to the ten-minute video tape in twenty-five minutes. I'm going to give a different kind of talk, I think. The paper I wrote "The Early History of Smalltalk" was written to be readable and to be read, and I hope that you will read it at some point, if you haven't already. It is fairly detailed, and I can't actually cover that ground today. It's probably just as well. There is also an interesting ACM policy in writing papers, I discovered, and that is that they won't let you put footnotes in. So the idea is that you either put them in the body of the text or leave them out. So fleft them out, because the reason for footnotes is so you can have a nice flow of writing. But what I thought I would do, is do the footnotes in this talk. I'm a little worried about the time limit. I remember after graduate school I was going around looking for jobs and somebody asked me, "Can you give a two-hour lecture on the FLEX machine?" I said, "I don't know. I'd never been that brief." One of the things I discovered about this exercise is what Henry Ford said, which is "history is bunk," because every time I tried writing the paper, I wrote a different one. Every time I worked on this talk, I came up with a different one. They are all sort of true, and they are all sort of false. There's not only revisionism here, but there's also the emotional tinge that you have from day to day, in how you remember things.
(SLIDE 1) At PARC in 1974-forget about these firsts—the word "first" doesn't matter; arguably, we had the first PC workstation, first overlapping window interface, first modern OOP, first laser printer, and first packet-switching LAN. One of the interesting things about PARC—and I'm going to get into this a little bit—is that, for example, the PC workstation was done by a couple of people in the Computer Science Lab with some data from me. Our group, the Learning Research Group, did the user interface and Smalltalk. The Ethernet was done by one person in one lab and one person in another lab. And the laser printer was done by a person in yet a third lab. And in fact, there was no supreme plan of any kind, having to do with management coordination. The whole shebang was done
by a bunch of people who were actually kind of friendly and just decided to do it. It wasn't to say that there wasn't a dream or a vision; there was a very strong dream from ARPA, and a very strong vision.
One of the joys at PARC is that, for many years, we got along without a lot of management. There was a romance about this, and what I want to talk to you about, is the romance of design, or how do you actually do it, or why do things sometimes turn out in a completely different way than normal improvement.
(SLIDE 2a) Arthur Koestler wrote a book called The Act of Creation which had quite a bit of influence on us. One of his models was that we think relative to contexts, which are more or less consistent sets of beliefs. Kuhn calls them "paradigms." Creativity-in-a-context normally happens and turns out results that are improvements on the kinds of things that you are doing that are in accord with your belief structures. Now, he calls this "normal science" or "evolutionary science." I'd like to explore the other kind, what he calls "revolutionary science." The way I think about this is, the two things that make life worth living are love and "holy shits." Once you have a "holy shit," it's hard not to want to find more. And in Koestler's diagram, a "holy shit" is sort of represented like this.
(SLIDE 2b) It is a funny thing that terrific ideas tend to hide behind good ones. The real enemy of a terrific idea is a good one, because the good ones have so many reasons for staying with them. But, all of a sudden something happens, and all of a sudden you are catapulted into a completely different
of beliefs. Koestler's theory of creation is that most creation is sort of like a joke—a joke is where you are led around one path and all of a sudden it reveals you are in a completely different situation.
(SLIDE 2c) He even came up with emotional reactions: like if it's a joke it's "ha," if it's science, its "a ha," and if it's art, it's "aah." I thought I would balance that, because that was too optimistic.
(SLIDE 2d) There was also "uh oh," "oh no" and "oh!" So there is a surprise of being catapulted into a different context.
(SLIDE 3a) McLuhan had a different way of looking at this. He said "I don't know who discovered water but it wasn't a fish." So the fish doesn't know what color water he is in, because his nervous system has normalized away what's in his environment. We can think of that water as being beliefs.
(SLIDE 3b) One of the things that humans have learned to do is to use better goldfish bowls. Some of them are called culture. The cultural beliefs that we have can be much more powerful than what our brains are born with. Going from being situated in one goldfish bowl to another is about as tough as being totally creative; maybe it's tougher. Many people who make the jump become even more religious about the new bowl; they forget it's a bowl.
(SLIDE 3c) And of course, one of the things that we do occasionally in science, is that we make a better goldfish bowl. So as we're jumping, we are sketching away at the bowl, and we hope that we get all the water in there before we hit.
Now this one is mainly done by crazy people, and by a few scientists, and some artists. One of the problems with this is that when you go from one goldfish bowl to another—particularly when you make the goldfish bowl yourself—every goldfish bowl forces you to see things its way. It's like the man in Moliere's play, who suddenly discovered that he had been speaking prose all of his life; it changed his realization of what he had been doing. So, the idea is that if you are going to do this, you better make sure that the end result is really good, because the religious feeling you are going to get when you get over here is going to be the same regardless of whether it is good or bad. It is just the self-confirming seductiveness that a belief-structure has.
(SLIDE 4) Another metaphor I like is frogs. In fact, here at MIT they discovered that the frog's eyes do not tell the frog's brain about much. If you take the frog's normal food, paralyze it (the frog) with a little bit of chloroform, (and then) put flies out in front of the frog, the frog will not eat them, because it can't see that a fly is food. If you flip a little piece of cardboard at the frog that is organized longitudinally, the frog will try and eat it every time, because the food is an oblong moving shape. I think that for us scientists, one of the ways of looking at this, is thinking of these flies as ideas. They are in front of us all the time, but we can't see the darn things.
So there's a fundamental principle in all this stuff, and that is that all nervous systems are unconscious with regard to most of the environment, all of the time. One of the most important things to realize, when you are trying to do this stuff, is that whatever you think you believe in almost certainly is not going to help you. You somehow have to make the bowl that you are in, visible, and there are various ways of doing it. You can only learn to see, when you realize that you are blind. Of course, one of the things we know about eyes is that they don't evolve when there is no light.
(SLIDE 5) Here are some candle bearers. This is one of the most amazing decades I think in this century for funding that these four guys created in the sixties. Notice that only Lick (Licklider) was over forty when he took over. Ivan (Sutherland) was twenty-six, Bob Taylor was thirty-four, and Larry Roberts was thirty-one. They were taken out of the ARPA community, and their basic idea is that we will fund people instead of projects, because we can't really judge projects. So we will fund people instead, and we will fund directions instead of goals. That way, these guys didn't have to do a lot of peer-review stuff. But, what they were interested in, was the energy and verve, and probability of success, of the people that they were funding. In spite of the fact that this is one of the best examples of success in funding, very few companies and very few institutions do it this way.
(SLIDE 6) There are lots of cool characters out there that helped the future happen. Here is Dave Evans. One of the most important things about Dave Evans is that he. like most of the ARPA
Contractors, treated his graduate students as absolute colleagues. If you couldn't be a colleague, he would ease you out. For instance, I flew 140,000 miles as a graduate student; he actually had a travel budget for graduate students. His idea was (that) we had to go around and find out what people are doing; don't wait to read it in a paper. He had been an architect of one of the earliest tagged architectures, the Bendix G-20, in the the '50s. And one of the things I got from him, is this idea that, whenever you are working on what appears to be the main part of a problem, you are probably off, because that's the most obvious path. What you should be worrying about are the exception conditions.
So one of his ideas was basically always leave an "extra bit." That extra bit is all you need, because if you can trap anywhere, then whatever you are trying to do straightforwardly won't kill you in the end. This is a terrific general metaphor.
(SLIDE 7) The context at Utah was large scale 3-D. It wasn't just inventing continuous tone graphics. It was large-scale architecture and CAD. The size of the data structures and stuff they were talking about was many, many orders of magnitude larger than any of the computing that was going on at the time. One of the first things that struck me, was the disparity between what Evans wanted to do, and the way computing was being done then. Which reminded me of how you can make a dog house out of pretty much anything except maybe match sticks, because the materials are so strong compared to the size and structure you are building. Programming in the '50s, particularly in the '60s, could get away with having fragile data structures and procedures, because they weren't that complicated; it wasn't that big a deal; you could track down things. When I learned how to program in the early '60s we only got the machine for five minutes every other day, and you couldn't touch it.
So you had to do everything by desk checking.
(SLIDE 8) But this isn't what they are talking about. So this is the mechanistic view that still persists today. Probably the worst thing you ever could do is to teach somebody algorithms as their first programming course, because it gives people a completely limited idea of what computers are about. It's like anybody could do physics in the middle ages, you just get a hat. There is not that much to know.
(SLIDE 9) But, if you want to do something that has hundreds and hundreds of thousands, or millions and millions of parts, you need something like a principle of architecture. That set up some stress.
One of the most fortunate things that happened to me when I went to Utah, was that I got there too late for one semester and too early for another semester. So there were actually two months when I had nothing to do. Dave Evans did something really amazing; he said, "What would you like to do in
those two months?" I'd never had anybody ask me that in any school situation. I said, "Well, I'd like to actually read things. I'd like to try to understand what's going on," because I actually didn't know anything.
(SLIDE 10) Now, go back to Koestler a second. Why is general education important? Well, if you don't have general education, you don't have any blue ideas, because when you are thinking along, what actually happens is your little thought patterns in one context are bumping into these other contexts. There are little excursions in there, and then rejections usually, and they come back to earth.
You need some sort of forcing function. When a forcing function happens, you have two choices. One is you can decide to keep on going and automate the old stuff that you are working on using the new technique better, or there might be this possibility that this is an entirely new way of doing things—and you can actually leap up into this new context and the world is not the same again. For instance, in Maxwell's equations, the cruxpoint was Lorentz's transform, which was a solution of Maxwell's equations that didn't make any sense in a Newtonian world, and Einstein had to go to a different context in order to make sense of them.
Simula, I think, was one of the greatest cruxpoints that we have had in many years, certainly the best one since LISP. The question is, what was it?
The most normal way was to think of it as a better old thing, and it certainly was-certainly better than ALGOL and ALGOL-X. One of the things you could do—as Barbara talked about—is we could use this as a stimulus to construct something that was better than the better old things, and get abstract data types. Fortunately, I didn't know anything about computer science then. I've not been that innocent since. So, I actuall had no interest in improving ALGOL because I didn't even know ALGOL very well. I had only programmed in machine code and a little bit of FORTRAN. And so, when I saw Simula, it immediately made me think of tissues. There are lots of little independent things-Simula called them processes-floating around in communication with each other, and my little bump transformed me from thinking of computers as mechanisms, to thinking of them as things that you could make biological-like organisms in, that is, things were up in the ten' to ten 13 level of complexity.
So, my path from then on, was this way-towards something that was a different way. It's not necessarily that this was a better way of going, but I am just trying to say that I just couldn't look a regular programming language in the face after that encounter with Simula-procedures seemed now to be the worst possible way of doing anything.
And I had some aiders and abetters: Bob Barton, who is known as the "ghost who walks" at Utah, because he was seen outside of the Merrill Engineering building and inside of Merrill Engineering building, but he was never seen entering or leaving Merrill Engineering Building.
(SLIDE 11) This is actually not a picture of him, because I don't think he has ever been photographed. I'm not sure that he would actually show up on film. So, I actually found a picture of somebody else that looked like him, and I processed it. Barton was this big huge guy who spoke his mind. I remember the first course I took from him. He came stomping into the room and said, "Well, there are a few things known about advanced systems design. I expect you to read them and learn them. But my job is to firmly disabuse you of all the fondly held notions that you might have brought into this classroom." And so what he proceeded to do was to shoot down everything that we believed in. This is something I believe Marvin did that was a service to MIT students. It was extremely liberating. Because by the time you got done with this, those of us who would still survive, there was nothing that was sacred. We could do anything we wanted. Just because other people were doing it didn't mean anything. He was so obnoxious, that even the faculty complained about him to Dave Evans. And Dave Evans said to them: "We don't care if they are prima donnas, as long as they can sing."
That was Bob Barton.
(SLIDE 12) Here is Ivan. I once asked him, "How could you possibly have done the first object-oriented software system, the first graphics system, and the first constraint solving system, all in one year?" He said, "Well, I didn't know it was hard." In fact, according to Wes Clark, the genesis of Sketchpad was when Ivan went out to Lincoln Labs and saw how bad the display was on the TX-2.
And instead of rejecting it like other people had, he asked, "What else can it do?" That's a question we could all try asking for ourselves. And what else it could do, it could simulate the things it was showing pictures of, not just these thick papers, but to actually simulate.
(SLIDE 13) Marvin (Minsky). "You have to form the habit of not being right for very long." One of the things that Marvin used to say is you should never just form distinctions, you should form
"tri-stinctions." So, don't just divide it up into two things, try to find a third way to divide it up, and that's probably the way you should go.
The reason I am showing things, is, because this stuff is more a matter of attitude than intelligence.
The attitude that these guys had led to really good results. Classical science we think of as being given a universe and we work to discover its rules.
(SLIDE 14) The best book on complex system design. Think about it.
(SLIDES 15 and 16) Just two more people here.
I want to say that when you are doing something real, you've got to have some real peopie make it happen; and in many ways, Smalltalk is more of Dan's language than mine. I gave you some of the basis for the way we did it. I should mention one other thing, and that is that one of the great things about PARC is that we didn't have to worry about anybody's hardware. We just built everything. When you do that, you don't have to worry about certain efficiency things. Dan, if you know him, is one of the most even-tempered guys I've ever met. I only saw him really angry once, and that was right after he had done Smalltalk-76. I went into him and said, "Dan, now I know what we really should do." He just could not believe I would do this, after he had spent seven months getting this new system going. That was the kind of relationship we had.
And then finally, Adele, who said, "Isn't this illegal?" when we wanted to take the ALTOs down to the school, and PARC wouldn't let us— even though that was in the plan. We got our station wagon and loaded up some ALTOs in that station wagon, and took them down to the school. I called up George Pake and said, "Guess what I just did?" So, I'm the person who corrupted Adele.
(VIDEO) I want to show you a quick video montage of things in Smalltalk. This goes quickly, so I'll just talk as fast as I can. Here is the early ALTOs, with the cardboard protector on the display.
Here is one of the earliest groups of children, and I wonder who that might be, watching what they are doing. I don't recognize the hair style.
Here is how we taught—this was devised by Adele-here's how we taught kids Smalltalk. We gave them an instance of a class, which is called traditionally "Joe." We said, "Joe, grow fifty," now we say "Joe grow minus fifty." "Joe turn thirty-five." And now we make another instance of box called
"Jill". That shows up too and we can talk to it separately. So, we say, "Jill, turn whatever." Then we can make a little infinite repeat loop, that gives messages to them. Ultimately, we get a little movie.
This gives the kids the idea that these are separate entities but have similar behavior. Make a more complicated movie, has them changing size as well as rotating. They could play around with these.
What was interesting about this way of going about it, is you could build many interesting things from these boxes.
Here is one of the very first Smalltalk classes, Marion Goldeen, age twelve. One of the things she discovered was that if you took out the erase part in the draw methods, that you could make little brushes out of things. Each one of those is a box at the top. She has generalized them from squares into polygons. What it is doing now is following the mouse. Now she is getting a hexagon, and again it follows the mouse; it's a particular brush type. As you can see, she has made quite a few .... This is like MacPaint; it wasn't completely original; she had seen one of the early painting systems that we had done. This is a very short Smalltalk program done by a twelve-year old.
Then, we got this idea to have Marion teach the class. She is a year older here. She is thirteen, teaching twelve-year olds.
Here is an example from 1975, done by Susan Hamet who is also age twelve. This is a little bit more elaborate; this is like MacDraw, yet in the future, because instead of painting here, what she has is objects being maintained on the screen, (so) she can talk to them separately. She has a little menu over there, and a little window for feeding back and getting parameters. So she is going to change the size of this box on the left, make it small, and give it a lot of sides so she will get a circle. Each one of these things is actually an instance of a single class. This is the kind of thing we were shooting for, which is to have kids do their own tools, their own applications.
Now, the grownups are also doing things. This is the animation system done by Steve Purcell—un-fortunately, quite superior to what you can still do on the Macintosh. The ALTO is very powerful doing this.
And then some adult animators and computer people did this system that is called Shazam. This is about a five and a half to six page program in Smalltalk 72. On the left there is an animation window, on the right is a painting window, little iconic menus there. What he is going to do is give the thing he just drew a path to follow. Now it's following the path. What he is going to do is single step it now.
He is pointing to the stair steps. What he wants, is to get it down to the bottom, and he wants to replace the bottom one with a squashed one. Now, now he starts the animation again. And he has gotten a transparent cell; it's overlaid on the one he's got there. So he has actually not destroyed the old one; he is painting on another transparent layer. He is using that as the center. You can see that the painting is being inserted in, as he is painting. What animators want to do is put in enough similarity so you will think that the ball is deforming continuously, even though it's just one frame.
Another twelve-year old. Now she added a feature to the adult system. The feature is to be able to take two animated images and to combine them into one, which is not in the original system. So she picks that up; when she lets it go it's going to merge with the thing there, so now she gets a jockey and a race horse that will animate together.
One more thing in Smalltalk-72. This is a timbre editing system for frequency modulation. This was the first real-time FM system. It was done by Steve Saunders and Ted Kaehler. What you are doing is producing that timbre as a woodwind, and here it is as a kind of a bowed string. The ALTO could do eight real-time voices without any special hardware at all. So here is the C minor Fugue by Bach. This is about 1975.
Now, transition to Smalltalk-76, which is actually much more of a language for adult programmers.
One of the first really nifty things that was done in it, was this "simulation kit," which was a tool for novices. This grew out of our work going all the way back to Simula. It's kind of a job shop simulation where you can design the icons. This happened to be done by a Xerox Versatech executive, and represented a production line in the Versatech, and would automatically animate the simulation as it went along.
This was mainly designed by Adele. It was done in 1978. This is a system that was done in Smalltalk, called Playground. The ideas are very similar to stuff we were doing at PARC, except we decided that instead of just having the kids do applications, we wanted them to do complex systems.
Because one of the things that the computer does better than anything else is (it can be) a medium for understanding complex systems.
This is all done by children. It is a clownfish that has about twenty-five separate processes running in it. This is all highly parallel programming. What the clownfish is doing is acclimating itself to see an enemy. It also forages for food, tries to mate in the spring, it does shelter. It has four or five drives and only one body. In this foraging path, it attracts the attention of the shark. The shark chases it, its predator avoidance routine takes over the body and it goes for its sea anemone, which it has gotten acclimated to. The shark will not go there because the sea anemone will sting it. That was a more complicated program than most college people ever write, because they almost never write anything that is highly parallel or even parallel at all. One of the ways of thinking about this, my last sentence, is that the Greeks held that the visual arts were the imitation of life; we know that creativity is a lot more than that. But the computer arts are the imitation of creation itself. That's what we should aspire to when we try and design these systems.
TRANSCRIPT OF DISCUSSANT'S REMARKS
SESSION CHAIR BARBARA RYDER: Adele Goldberg joined Xerox PARC in June 1973, working with Alan Kay in the Learning Research Group as a new Ph.D. with experience in the use of computers and education, both for young children, college students, and adults. Her initial responsibility was to determine how to effectively teach children and adults about the various Smalltalk systems, and to plan and manage experiential projects as feedback to the language and environment design groups.
When Kay left on sabbatical, Goldberg became group manager for the System Concepts Group. One goal for the group was to create a Smalltalk system that would run on standard workstations and be
distributed outside Xerox. This goal was accomplished in 1983. At this time, Goldberg authored and coauthored several books on the Smalltalk-80 system. Earlier in 1981, Goldberg served as guest editor of the August 1981 issue of Byte Magazine, which introduced the general public to the ideas behind Smalltalk. In the early 1980s, Goldberg became manager of the System Concepts Laboratory, one of six research labs at PARC. This lab was located both in Palo Alto and in Portland. Research programs were pursued on the use of video to facilitate group design when members of the group are located in remote sites, essentially initiating research on collaborative computing. While working at Xerox PARC, Goldberg was active in the ACM. She served as Editor-in-Chief of Computing Surveys from 1979 until 1982, National Secretary from 1982 to 1984, and President from 1984 to 1986. During that time, she founded ACM Press, initiated the History Series, edited the ACM Press Book on The History of Personal Workstations, and helped found the OOPSLA Conference now managed by SIGPLAN.
In 1987, Goldberg convinced Xerox to form a separate business to leverage the research on object-oriented technology. ParcPlace Systems was founded in 1988. From 1988 through 1992, she served as CEO and President of ParcPlace. She is currently Chairman of the Board. Goldberg's current technical activities focus on organizational and cultural issues in the introduction of new technology into large organizations' software engineering groups.
ADELE GOLDBERG: As Alan has pointed out in his paper and presentation, Smalltalk is not the story of the evolution of the design of a language or language mechanisms. But rather, it's a story of culture, of organization and vision.
Early in my acquaintance with Alan, I recall someone asking him to give a talk to predict the future of computing. He said, "No, I'm not going to do that. I don't predict the future—I make it."
Lesson number one from Alan. Pick a dream, make it happen.
In this first regard, the Smalltalk invention and development history is different from many other languages. It represents an attempt to realize a dream.
(SLIDE 1) The dream starts with the idea, startling for those days, that computers are simply not interesting. What is interesting is what people can do with computers, and what they can access with them.
(SLIDE 2) The scheme then, the key to flexible information access and use, would be software, and that software we named Smalltalk.
Of course, to make dreams happen, you have to be empowered, and you have to empower. Alan once told us, that to his dismay, his vision of the future was hard, and he simply could not do it by
himself. So he went to Xerox and set out to hire an unorthodox set of people- each one too naive and full of the dream, to know the problem was hard-and each one some expansion of some part of Alan.
In private, we use to joke about which part each of us represented. I suppose that in truth, we weren't supposed to be a part of his body, but of his mind-sort of an early form of Vulcan mind meld.
Lesson number two from Alan. Hire people who don't know that what you want them to do is hard.
In the early days, I was the representative user. Maybe you could call me the Learning Police. Is what we have created learnable outside the group? Lots of clever computer science can't live up to that requirement.
(SLIDE 3) In a way, it was very fortunate that the research was set in the context of working with kids, because it introduced pedagogy as a quality objective. It motivated a number of significant language changes to support learning by doing, and learning by reading. Doing meant refining from existing useful objects—at every layer of the system. This readability as a quality objective allowed us to see the software problem that we were trying to solve—not as a problem in creating a programming language-but rather as a problem of creating a system for creating systems. These systems would define a higher-level language, created by their developers to be writeable and readable by anyone who understood the domain in which it was going to be used. Aiding readability became a critical challenge for us and any user interface and other environment support.
(SLIDE 4) One of my self-imposed tasks was to get people to understand that the ability to teach Smalltalk to children in no way implied that we had solved the learnability problem for adults. Kids could be guided through the system as it was constructed. The several educational resource centers I created convinced me of this point.
But adults would come to the system with their own ideas of what they wanted to do. We would have to be responsive to their way of thinking—of helping them to create appropriate models for their worlds. Clearly, the simulation or information modeling capabilities of our system would be the key determiner of success. I still believe this today. I do not believe I succeeded, however, in getting the group to understand the unfortunate distinction between so-called kids and so-called adults.
(SLIDE 5) By 1979, we were in systems programming mode, trying to move software ideas forward without a similar change in hardware capability. As Alan pointed out in his paper, the Note Taker project had been canceled despite—in our eyes—major proof-of-concepts success. We created the Smalltalk Hall of Shame that same year, and we inducted as the first member the then head of PARC, who declared that no one was interested in carrying computers around.
It was time to publish what we knew, and reorganize the research project. Perhaps it was time to admit the problem was hard, and find some more naive people to help us. Also, this form of completion was important as a morale builder, since considerable frustration was building up at the lack of, at least, internal Xerox acknowledgment of the group's contributions.
(SLIDE 6) Larry Tesler and I made another run at the business players that year—a project called Monk. Simple idea and it was very doable. Xerox technicians were not using up-to-date manuals, nor good diagnostic tools when repairing copiers. We wanted to give them an interim Dynabook, with a world of copier information literally under the machine with them. They didn't get the idea and the project did not get funded.
Steve Jobs came to visit. He did get the idea. He came back—with the entire Lisa programming team. After a two-hour hallway argument, I was forced by my managers' manager (the head of the then divided PARC) to give them an in-depth demo. They took the idea. This manager, too, was inducted into the Smalltalk Hall of Shame.
(SLIDE 7) These experiences communicated one hard lesson—we did not have a coherent act. We had lots of bits and pieces for good demos, but, the integrated whole was still in our heads. The best way to share was going to be by publishing the Smalltalk system itself, not a book or papers about a dream where we would risk people getting the schemes wrong. Of course, this was very risky. It violated Alan's critical admonishment, "Do not have customers; they expect support."
Lesson number three from Alan. If you don't share your results, you can burn the disk packs and start over.
But as individuals, and as a group, we wanted to feel that we finished something in a form that would get a fair evaluation in the computing world. We knew Smalltalk would run on the new
"personal" computers because the Note Taker was 8086-based. And we know we could not, alone, do all the work to take Smalltalk to people using these personal computers.
(SLIDE 8) To put out a system meant stopping research and doing enough work to have something we could release to people like us-researchers at universities and advanced development people in commercial companies. But which companies? Burt Sutherland suggested the answer-companies with the ability to create the hardware we wanted. We wanted to influence hardware extensions that would enhance the media accessible by a Smalltalk-like system.
So, we picked companies that built hardware systems, but which had in-house software teams. We signed up Apple, Hewlett-Packard, DEC, and Tektronix. Thus began the saga of creating the shareable
version of the system called Smalltalk-80, as a multivendor project. Again, Alan wasn't there to tell us the next lesson, although I'm sure it's something he would say.
Lesson number four from Alan. You have to be careful what you wish for—because you will get it.
(SLIDE 9) The release process had three parts to it. We redesigned the language and environment subsystem by subsystem, giving the engineers in the other companies access as we proceeded. We were able to rebuild the system in this manner partially because of the ability to cause all existing objects of one class to, essentially and instantaneously, become objects of another class.
(SLIDE 10) Ted Kaehler, the group cartoonist, likened this to the process of launching a ship while it was still being constructed.
The engineers in the four companies worked with us to define the formal specification of the virtual machine architecture. They each implemented the bytecode interpreter and devised various memory management schemes. Later these efforts were published in the book Smalltalk 80: Bits of Wisdom, Words of Advice, edited by Glenn Krasner, who managed the systems work in our research laboratory.
Dave Robinson and I acted as documenters, writing the description of the system as it unfolded, and making sure each part was sufficiently explainable. We wrote three books about the language. We only published the third.
(SLIDE 11) The earliest practice in publication came in 1981. Chris Morgan, then Editor-in-Chief of Byte Magazine, offered me all the feature pages of the August 1981 issue. Dan Ingalls liked hot air balloons as a way to announce that Smalltalk was finally traveling off its isolated island, an island Chris had described two years before.
(SLIDE 12) The result was shocking. I started to get letters from around the world-from universities and commercial organizations-asking to purchase the Smalltalk system. There was even an article called "Mostly Smalltalk" in the TWA Ambassador Magazine.
(SLIDE 13) Two more Xerox disappointments clouded the work effort. Because of some problems with the introduction of the Star system in 1981, we were asked to join another group in making recommendations. On July 21, 1982, Dan Ingalls and I formally submitted a plan to build a low-cost
68000-based Smalltalk-80 machine, that would serve as the entry level system of the Star family. We called it Twinkle. The proposal was ignored. It reappeared in 1984 as a variety of Apple. Apparently suggesting freehand graphics and a Smalltalk base was too controversial for Xerox. The Xerox manager responsible for delivering the proposal had simply not bothered, and he too was inducted into the Smalltalk Hall of Shame.
In order to share the Smalltalk-80 result, the then head of the Office Systems Group obligated us to build a version for the Star workstation. The project was started in (September) 1982 by Frank Zdybel, and joined later by Paul Mc Cullough. It was completed in the spring of 1984. It was written
in the Mesa programming environment and was our first experiment in creating an environment within an environment. In honor of how it ran, we called it Molasses. Early in the development process, the business head tried to renege on the deal to release Smalltalk, and earned his position in the Smalltalk Hall of Shame.
(SLIDE 14) It took until May of 1983 to finish the first of the Smalltalk-80 books, and to start rolling out the first of commercial implementations done by the vendors participating in the release process. This slide shows the Tekronix Magnolia, with a Smalltalk-80 system, created in Tek Labs, primarily by Allen Wirfs-Brock. The Magnolia was designed by Roger Bates, who had left Xerox a short time before. The next version was sold commercially as the Tekronix 4400. We ourselves had done a native system port to the first Sun workstation which I had borrowed from the Fairchild AI Lab because we were, in those days, not allowed to buy non-Xerox machines.
Meanwhile, Xerox Special Information Systems, a unit of Xerox which does government contract work, had taken early Smalltalk releases and used them to create an office automation system called the Analyst. The Analyst-84 was being readied for broad deployment in the CIA. And so by 1985, we tried to get Xerox to face up to a cold truth: the CIA was in production using an Analyst workstation based on a research result. This was not a good idea. The base system had to be engineered; a real business investment was needed. Visits from the Administrative Head of the CIA to PARC did not change the mind of any Xerox business decision maker.
But, in 1986, with a new head of the Office Systems Group, and some friendly ears, an internal task force set out to evaluate the marketplace for Smalltalk. Their conclusion? Do it! Bill Spencer, then head of PARC, approved an experiment to start a business internally, while Xerox sorted out what to do. We moved three engineers from the Dallas Development Center in July, and some of the researchers refocused on rethinking the implementation technology. In November of 1986, Peter Deutsch and shortly after, Allan Shiffman, joined and started the complete redesign of the virtual machine technology. In February 1987, myself and two of the research team formed ParcPlaceHolders, a corporate shell that began a 13-month negotiation to form ParcPlace Systems, Inc., as an independent company.
(SLIDE 15) After five years, the language base has not changed a lot, although the implementation technology has been completely redesigned and implemented. It is the first truly reusable, fully-com-piled, Smalltalk system. Creating an application on one of 11 ParcPlace platforms means that your application runs on 11, without your doing any more work. But those ports are compiled to the host instruction set, access host operating system features, and host windowing and graphics. We have
changed the virtual machine and the object engine; we have extended the notion of late binding to run-time compilation and execution in the context of late binding of application-level specification of policies for graphics and for user interaction.
(SLIDE 16) The language was modified to have closure of blocks. An exception handling capability was added. And a number of libraries, as well as bridges to C, and to external databases, were built.
We ship two different development environments, two additional kits of libraries and tools, on all 11 platforms. Since the fall of 1986, we have released five complete revisions of the system.
(SLIDE 17) Today, there are numerous Smalltalk vendors and service companies. A few months ago, ANSI created X3J20 as the official Smalltalk Standards Committee. According to last week's Business Week article, "The Buzz is About Smalltalk," and the Analyst workstation is still alive and well in the CIA.
So, 10 years, almost to the month, after its first publication, and two months short of a 20-year anniversary of my arrival at Xerox, Smalltalk continues to be a surprisingly persistent object.
TRANSCRIPT OF QUESTION AND ANSWER SESSION
For ALAN KAY and ADELE GOLDBERG from JEFF SUTHERLAND (Object Databases):
Smalltalk is used by 10 percent of software product developers, C++ by 50 percent. What do you see as the future mind-share for Smalltalk, particularly in end-users SWOPS?
ALAN KAY: Like AV equipment, which should have a grenade put in them with a 20-year timer, programming languages should be forced to blow themselves up because the problem with the mind-share is that they actually pollute further ideas. I mean, I think one of our biggest problems is that programming languages hang around for too long, and I see absolutely no correlation between the number of people who use a particular language or how long it's been around, with how good the language is. So the fact that people are using Smalltalk now, doesn't mean it's any good either. I think the thing that I left out in my talk, that was the most important reason to use a language like Smalltalk or LISP, is the meta-definition facility. You should not take the language any more as a collection of features done by some designer, but you should take it as a way of enabling the language that you actually need, to write a system. From that standpoint, I think Smalltalk and LISP actually are going to hang on for a long time. I think writing in the language as the original designers envisioned them is really silly after all this time.
ADELE GOLDBERG: Let me add to this. I really despise all these statistics. Languages are designed for specific purposes. Each one of them has its role to meet the design objectives. If you take a market segment where the language is appropriate, then you talk about penetration, you'll have some interesting numbers. The market segment that's interesting for Smalltalk, is the current COBOL community of MIS people, where C++ has zero penetration, where Smalltalk has now got about five percent, which I think is at least four and a half percent more than anybody expected, maybe more.
What is going on here, is that people invent languages to express their ideas. And what really needs to happen, is to make it easier and easier for people who know their domain to know what they want to do, to express their ideas, and invent their own programming language. That's why that simulation kit that Alan showed you is so interesting. It is a framework for expressing the adventure of simulation, in which people who know something about the events and the domains that they are interested in could express their own ideas about what they want to see happen.
For ALAN KAY from JIm KIRK (Affiliation not mentioned): In your talk, you nominated object-oriented programming as a programming system with thousands of parts. In your paper you endorsed object-oriented programming as a way for children and others to think about computers. Are these two notions, in fact, related? Are these two notions, in fact, the same?
KAY: Give me a few minutes, and I can relate any two things. One of the ways of boiling down what our aspirations were, was that every time we come along with a new medium for capturing our ideas, it also has some modes of thought that go along with it. I think the modes of thought that are fallacious about computing, have to do with complex systems with many interacting parts. And that's something that's very hard to think about in using old mathematics, and old mediums). I think that one of the aims for teaching children thinking, is that one of the good modes for them to think about are very complex things that have ecological relationships to each other. So, I think giving children a way of attacking complexity, even though for them complexity may be having a hundred simultaneously executing objects-which I think is complex enough for anybody—gets them into that space in thinking about things that I think is more interesting than just simple input/output mechanisms.
SCOTT GUTHREY (Schlumberger): Did the D machine initiative help or hinder Smalltalk?
(Ryder: Perhaps in your answer, you'll explain what the D machines were)
KAY: The D machines were talked about this morning a bit. They were a series of follow-ons to the ALTP. I think in many ways, one of the things that hurt Smalltalk—and this is absolutely my own personal view—is that the first D machine was late. And it was late, partially because Xerox just did not want to put hundreds of ALTOs in there and we came right back and said now we need machines that are five times faster. They just didn't understand the implications of things. And part of what happened when we did Smalltalk-76 was not just a cleanup, but we actually regressed-if I can use that word-back towards some of the Simula formations, to get more efficiency. I think what we should have done was kept on building faster and faster machines until we understood what object-oriented design was really about.
BIOGRAPHY OF ALAN C. KAY
Dr. Alan Kay is best known for the idea of personal computing, the conception of the intimate laptop computer, and the inventions of the now ubiquitous overlapping-window interface and modern object-oriented programming. These were catalyzed by his deep interests in education and children.
He led one of several groups in the early '70s at the Xerox Palo Alto Research Center that together
developed these ideas into: modern workstations and the forerunners of the Macintosh, Smalltalk, EtherNet, Laserprinting, and network "client-servers."
Before Xerox, Kay was a member of the University of Utah ARPA research team that developed 3D graphics. His Ph.D. in 1969 was awarded for the development of the first graphical object-oriented personal computer. His undergraduate degrees were in Mathematics and Molecular Biology (from the University of Colorado in 1966). As a member of the ARPA community, he also participated in the early design of the ARPANet (which became the Internet). After Xerox he was Chief Scientist of Atari, and from 1984 has been a Fellow at Apple Computer.
He is a Fellow of the American Academy of Arts and Sciences, and the Royal Society of Arts. He has received numerous awards and prizes including the J-D Warnier Prix D'Informatique and the ACM Systems Software Award.
A former professional jazz guitarist and composer, he is now an amateur classical pipe-organist.
